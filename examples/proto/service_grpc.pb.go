// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: service.proto

package proto

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Service_DownloadFile_FullMethodName           = "/collision.servicepb.Service/DownloadFile"
	Service_UploadFile_FullMethodName             = "/collision.servicepb.Service/UploadFile"
	Service_UploadMultipleFiles_FullMethodName    = "/collision.servicepb.Service/UploadMultipleFiles"
	Service_UploadToAnotherService_FullMethodName = "/collision.servicepb.Service/UploadToAnotherService"
)

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	// download file
	DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[httpbody.HttpBody], error)
	// upload file
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[httpbody.HttpBody, emptypb.Empty], error)
	// upload multiple files
	UploadMultipleFiles(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[httpbody.HttpBody, emptypb.Empty], error)
	// upload with stream to another service
	UploadToAnotherService(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[httpbody.HttpBody, emptypb.Empty], error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[httpbody.HttpBody], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[0], Service_DownloadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DownloadFileRequest, httpbody.HttpBody]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Service_DownloadFileClient = grpc.ServerStreamingClient[httpbody.HttpBody]

func (c *serviceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[httpbody.HttpBody, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[1], Service_UploadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[httpbody.HttpBody, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Service_UploadFileClient = grpc.ClientStreamingClient[httpbody.HttpBody, emptypb.Empty]

func (c *serviceClient) UploadMultipleFiles(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[httpbody.HttpBody, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[2], Service_UploadMultipleFiles_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[httpbody.HttpBody, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Service_UploadMultipleFilesClient = grpc.ClientStreamingClient[httpbody.HttpBody, emptypb.Empty]

func (c *serviceClient) UploadToAnotherService(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[httpbody.HttpBody, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[3], Service_UploadToAnotherService_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[httpbody.HttpBody, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Service_UploadToAnotherServiceClient = grpc.ClientStreamingClient[httpbody.HttpBody, emptypb.Empty]

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility.
type ServiceServer interface {
	// download file
	DownloadFile(*DownloadFileRequest, grpc.ServerStreamingServer[httpbody.HttpBody]) error
	// upload file
	UploadFile(grpc.ClientStreamingServer[httpbody.HttpBody, emptypb.Empty]) error
	// upload multiple files
	UploadMultipleFiles(grpc.ClientStreamingServer[httpbody.HttpBody, emptypb.Empty]) error
	// upload with stream to another service
	UploadToAnotherService(grpc.ClientStreamingServer[httpbody.HttpBody, emptypb.Empty]) error
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceServer struct{}

func (UnimplementedServiceServer) DownloadFile(*DownloadFileRequest, grpc.ServerStreamingServer[httpbody.HttpBody]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedServiceServer) UploadFile(grpc.ClientStreamingServer[httpbody.HttpBody, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedServiceServer) UploadMultipleFiles(grpc.ClientStreamingServer[httpbody.HttpBody, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method UploadMultipleFiles not implemented")
}
func (UnimplementedServiceServer) UploadToAnotherService(grpc.ClientStreamingServer[httpbody.HttpBody, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method UploadToAnotherService not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}
func (UnimplementedServiceServer) testEmbeddedByValue()                 {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	// If the following call pancis, it indicates UnimplementedServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).DownloadFile(m, &grpc.GenericServerStream[DownloadFileRequest, httpbody.HttpBody]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Service_DownloadFileServer = grpc.ServerStreamingServer[httpbody.HttpBody]

func _Service_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceServer).UploadFile(&grpc.GenericServerStream[httpbody.HttpBody, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Service_UploadFileServer = grpc.ClientStreamingServer[httpbody.HttpBody, emptypb.Empty]

func _Service_UploadMultipleFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceServer).UploadMultipleFiles(&grpc.GenericServerStream[httpbody.HttpBody, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Service_UploadMultipleFilesServer = grpc.ClientStreamingServer[httpbody.HttpBody, emptypb.Empty]

func _Service_UploadToAnotherService_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceServer).UploadToAnotherService(&grpc.GenericServerStream[httpbody.HttpBody, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Service_UploadToAnotherServiceServer = grpc.ClientStreamingServer[httpbody.HttpBody, emptypb.Empty]

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "collision.servicepb.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DownloadFile",
			Handler:       _Service_DownloadFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadFile",
			Handler:       _Service_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UploadMultipleFiles",
			Handler:       _Service_UploadMultipleFiles_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UploadToAnotherService",
			Handler:       _Service_UploadToAnotherService_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
